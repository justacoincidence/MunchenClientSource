using System;
using System.Collections;
using ExitGames.Client.Photon;
using MelonLoader;
using MunchenClient.Config;
using MunchenClient.Core;
using MunchenClient.Menu.Others;
using MunchenClient.Utils;
using MunchenClient.Wrappers;
using Photon.Realtime;
using UnchainedButtonAPI;
using UnityEngine;
using VRC.SDKBase;

namespace MunchenClient.Menu
{
	internal class PhotonExploitsMenu : QuickMenuNestedMenu
	{
		internal static QuickMenuToggleButton fakeLagButton;

		internal static QuickMenuToggleButton serializationButton;

		internal static QuickMenuToggleButton ghostJoinButton;

		internal static QuickMenuToggleButton voiceImitationButton;

		internal static QuickMenuToggleButton inverseKinematicMimicButton;

		internal static QuickMenuToggleButton earrapeExploitButton;

		private static bool earrapeExploitRunning = false;

		private static readonly RaiseEventOptions raiseEventOptions = new RaiseEventOptions
		{
			field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
			field_Public_EventCaching_0 = EventCaching.DoNotCache
		};

		internal PhotonExploitsMenu(QuickMenuButtonRow parent)
			: base(parent, LanguageManager.GetUsedLanguage().PhotonExploitsMenuName, LanguageManager.GetUsedLanguage().PhotonExploitsMenuDescription)
		{
			new QuickMenuHeader(this, LanguageManager.GetUsedLanguage().MiscellaneousCategory);
			QuickMenuButtonRow parentRow = new QuickMenuButtonRow(this);
			new QuickMenuSpacers(this);
			QuickMenuButtonRow parentRow2 = new QuickMenuButtonRow(this);
			new QuickMenuSpacers(this);
			QuickMenuButtonRow quickMenuButtonRow = new QuickMenuButtonRow(this);
			serializationButton = new QuickMenuToggleButton(parentRow, LanguageManager.GetUsedLanguage().Serialization, GeneralUtils.serialization, delegate
			{
				GeneralUtils.serialization = true;
				ActionWheelMenu.serializationButton.SetButtonText("Serialization: <color=green>On");
				GeneralUtils.fakelag = false;
				fakeLagButton.SetToggleState(state: false);
			}, LanguageManager.GetUsedLanguage().SerializationDescription, delegate
			{
				GeneralUtils.serialization = false;
				ActionWheelMenu.serializationButton.SetButtonText("Serialization: <color=red>Off");
			}, LanguageManager.GetUsedLanguage().SerializationDescription);
			new QuickMenuToggleButton(parentRow, LanguageManager.GetUsedLanguage().OnKeySerialization, Configuration.GetGeneralConfig().OnKeySerialization, delegate
			{
				Configuration.GetGeneralConfig().OnKeySerialization = true;
				Configuration.SaveGeneralConfig();
			}, LanguageManager.GetUsedLanguage().OnKeySerializationDescription, delegate
			{
				Configuration.GetGeneralConfig().OnKeySerialization = false;
				Configuration.SaveGeneralConfig();
			}, LanguageManager.GetUsedLanguage().OnKeySerializationDescription);
			fakeLagButton = new QuickMenuToggleButton(parentRow, LanguageManager.GetUsedLanguage().Fakelag, GeneralUtils.fakelag, delegate
			{
				GeneralUtils.fakelag = true;
				GeneralUtils.serialization = false;
				serializationButton.SetToggleState(state: false);
				ActionWheelMenu.serializationButton.SetButtonText("Serialization: <color=red>Off");
			}, LanguageManager.GetUsedLanguage().FakelagDescription, delegate
			{
				GeneralUtils.fakelag = false;
			}, LanguageManager.GetUsedLanguage().FakelagDescription);
			ghostJoinButton = new QuickMenuToggleButton(parentRow, LanguageManager.GetUsedLanguage().GhostJoin, GeneralUtils.ghostJoin, delegate
			{
				GeneralUtils.ghostJoin = true;
			}, LanguageManager.GetUsedLanguage().GhostJoinDescription, delegate
			{
				GeneralUtils.ghostJoin = false;
			}, LanguageManager.GetUsedLanguage().GhostJoinDescription);
			new QuickMenuToggleButton(parentRow2, LanguageManager.GetUsedLanguage().LockInstance, GeneralUtils.lockInstance, delegate
			{
				GeneralUtils.lockInstance = true;
			}, LanguageManager.GetUsedLanguage().LockInstanceDescription, delegate
			{
				GeneralUtils.lockInstance = false;
			}, LanguageManager.GetUsedLanguage().LockInstanceDescription);
			voiceImitationButton = new QuickMenuToggleButton(parentRow2, LanguageManager.GetUsedLanguage().VoiceImitation, GeneralUtils.voiceImitation, delegate
			{
				if (GeneralUtils.voiceImitationPlayerKey != -1)
				{
					GeneralUtils.voiceImitation = true;
				}
				else
				{
					voiceImitationButton.SetToggleState(state: false);
					ConsoleUtils.Info("Player", "No player selected under Player Options", ConsoleColor.Gray, ".ctor", 106);
					GeneralWrappers.AlertPopup("Warning", "No player selected under Player Options");
				}
			}, LanguageManager.GetUsedLanguage().VoiceImitationDescription, delegate
			{
				GeneralUtils.voiceImitation = false;
			}, LanguageManager.GetUsedLanguage().VoiceImitationDescription);
			inverseKinematicMimicButton = new QuickMenuToggleButton(parentRow2, LanguageManager.GetUsedLanguage().InverseKinematicMimic, GeneralUtils.inverseKinematicMimic, delegate
			{
				if (GeneralUtils.inverseKinematicMimicPlayerKey != -1)
				{
					GeneralUtils.inverseKinematicMimic = true;
				}
				else
				{
					inverseKinematicMimicButton.SetToggleState(state: false);
					ConsoleUtils.Info("Player", "No player selected under Player Options", ConsoleColor.Gray, ".ctor", 124);
					GeneralWrappers.AlertPopup("Warning", "No player selected under Player Options");
				}
			}, LanguageManager.GetUsedLanguage().InverseKinematicMimicDescription, delegate
			{
				GeneralUtils.inverseKinematicMimic = false;
			}, LanguageManager.GetUsedLanguage().InverseKinematicMimicDescription);
			earrapeExploitButton = new QuickMenuToggleButton(parentRow2, "Earrape Exploit", earrapeExploitRunning, delegate
			{
				StartEarrapeExploit();
			}, "Haha voice data go brr", delegate
			{
				StopEarrapeExploit();
			}, "Haha voice data go brr");
		}

		internal static void StartEarrapeExploit()
		{
			earrapeExploitRunning = true;
			MelonCoroutines.Start(EarrapeExploit());
		}

		internal static void StopEarrapeExploit()
		{
			earrapeExploitRunning = false;
		}

		private static IEnumerator EarrapeExploit()
		{
			byte[] voiceData = new byte[71]
			{
				0, 0, 0, 0, 0, 0, 0, 0, 187, 134,
				59, 0, 248, 125, 232, 192, 92, 160, 82, 254,
				48, 228, 30, 187, 149, 196, 177, 215, 140, 223,
				127, 209, 66, 60, 0, 226, 53, 180, 176, 97,
				104, 4, 248, 238, 195, 134, 44, 185, 182, 68,
				94, 114, 205, 181, 150, 56, 232, 126, 247, 155,
				123, 172, 108, 98, 80, 56, 113, 89, 160, 134,
				221
			};
			Buffer.BlockCopy(BitConverter.GetBytes(PlayerWrappers.GetCurrentPlayer().prop_VRCPlayerApi_0.playerId), 0, voiceData, 0, 4);
			while (earrapeExploitRunning)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds()), 0, voiceData, 4, 4);
				PhotonUtils.OpRaiseEvent(1, voiceData, raiseEventOptions, default(SendOptions));
				yield return new WaitForSecondsRealtime(0.03f);
			}
		}
	}
}
