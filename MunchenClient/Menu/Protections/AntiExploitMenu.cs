using MunchenClient.Config;
using MunchenClient.Core;
using UnchainedButtonAPI;

namespace MunchenClient.Menu.Protections
{
	internal class AntiExploitMenu : QuickMenuNestedMenu
	{
		internal AntiExploitMenu(QuickMenuButtonRow parent)
			: base(parent, LanguageManager.GetUsedLanguage().AntiExploitMenuName, LanguageManager.GetUsedLanguage().AntiExploitMenuDescription)
		{
			QuickMenuButtonRow parentRow = new QuickMenuButtonRow(this);
			new QuickMenuToggleButton(parentRow, LanguageManager.GetUsedLanguage().AntiFreezeExploit, Configuration.GetGeneralConfig().AntiFreezeExploit, delegate
			{
				Configuration.GetGeneralConfig().AntiFreezeExploit = true;
				Configuration.SaveGeneralConfig();
			}, LanguageManager.GetUsedLanguage().AntiFreezeExploitDescription, delegate
			{
				Configuration.GetGeneralConfig().AntiFreezeExploit = false;
				Configuration.SaveGeneralConfig();
			}, LanguageManager.GetUsedLanguage().AntiFreezeExploitDescription);
			new QuickMenuToggleButton(parentRow, LanguageManager.GetUsedLanguage().AntiEarrapeExploit, Configuration.GetGeneralConfig().AntiEarrapeExploit, delegate
			{
				Configuration.GetGeneralConfig().AntiEarrapeExploit = true;
				Configuration.SaveGeneralConfig();
			}, LanguageManager.GetUsedLanguage().AntiEarrapeExploitDescription, delegate
			{
				Configuration.GetGeneralConfig().AntiEarrapeExploit = false;
				Configuration.SaveGeneralConfig();
			}, LanguageManager.GetUsedLanguage().AntiEarrapeExploitDescription);
			new QuickMenuToggleButton(parentRow, LanguageManager.GetUsedLanguage().AntiInstanceLock, Configuration.GetGeneralConfig().AntiInstanceLock, delegate
			{
				Configuration.GetGeneralConfig().AntiInstanceLock = true;
				Configuration.SaveGeneralConfig();
			}, LanguageManager.GetUsedLanguage().AntiInstanceLockDescription, delegate
			{
				Configuration.GetGeneralConfig().AntiInstanceLock = false;
				Configuration.SaveGeneralConfig();
			}, LanguageManager.GetUsedLanguage().AntiInstanceLockDescription);
			new QuickMenuToggleButton(parentRow, LanguageManager.GetUsedLanguage().AntiWorldTriggers, Configuration.GetGeneralConfig().AntiWorldTriggers, delegate
			{
				Configuration.GetGeneralConfig().AntiWorldTriggers = true;
				Configuration.SaveGeneralConfig();
			}, LanguageManager.GetUsedLanguage().AntiWorldTriggersDescription, delegate
			{
				Configuration.GetGeneralConfig().AntiWorldTriggers = false;
				Configuration.SaveGeneralConfig();
			}, LanguageManager.GetUsedLanguage().AntiWorldTriggersDescription);
		}
	}
}
